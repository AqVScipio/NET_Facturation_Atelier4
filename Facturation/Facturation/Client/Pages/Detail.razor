@page "/facture"

@using Facturation.Shared

@inject HttpClient http
@inject FactureRef fRef
@inject NavigationManager nav


<h3>Detail</h3>

@if (fac != null)
{
    <EditForm Model="@fac" OnValidSubmit="@HandleSubmit">

        <table class="table">
            <thead>
                <tr>
                    <th>Numéro</th>
                    <th>Client</th>
                    <th>Echeance</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><InputText @bind-Value="fac.Numero" /></td>
                    <td><InputText @bind-Value="fac.Client" /></td>

                    @if (Facture.NbDaysRemaining(fac.DateReglement) <= Facture.DEADLINE_ALERT)
                    {
                        <td><InputDate @bind-Value="fac.DateReglement" min="@fac.DateReglement" /> - <span style="color:red;">@DeadlineToNbDaysRemaining(fac.DateReglement)</span></td>
                    }
                    else if (Facture.NbDaysRemaining(fac.DateReglement) <= Facture.DEADLINE_WARNING)
                    {
                        <td><InputDate @bind-Value="fac.DateReglement" min="@DateTime.Now.ToInputDate()" /> - <span style="color:orange;">@DeadlineToNbDaysRemaining(fac.DateReglement)</span></td>
                    }
                    else
                    {
                        <td><InputDate @bind-Value="fac.DateReglement" min="@DateTime.Now.ToInputDate()" /> - <span>@DeadlineToNbDaysRemaining(fac.DateReglement)</span></td>
                    }

                    <td><InputNumber @bind-Value="fac.MontantRegle" /> / <InputNumber @bind-Value="fac.Montant" /> € (@(fac.Montant - fac.MontantRegle) € restant dû)</td>
                </tr>
            </tbody>
        </table>
        <button type="submit">Sauver les modifications</button>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>

}

@code {
    private Facture fac = null;

    protected override async Task OnInitializedAsync()
    {
        fac = await http.GetFromJsonAsync<Facture>("api/factures/" + fRef.FReference);
    }

    private string DeadlineToNbDaysRemaining(DateTime date)
    {
        return (int)Math.Truncate((date - DateTime.Now).TotalDays) + " jours restants.";
    }

    private async Task HandleSubmit()
    {
        var response = await http.PostAsJsonAsync("api/factures/edit", fac);
        nav.NavigateTo("factures");
    }
}