@page "/facture"

@using Facturation.Shared

@inject HttpClient http
@inject FactureRef fRef


<h3>Detail</h3>

@if (fac != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Numéro</th>
                <th>Client</th>
                <th>Echeance</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@fac.Numero</td>
                <td>@fac.Client</td>

                @if (Facture.NbDaysRemaining(fac.DateReglement) <= Facture.DEADLINE_ALERT)
                {
                    <td>@fac.DateReglement.ToShortDateString() - <span style="color:red;">@DeadlineToNbDaysRemaining(fac.DateReglement)</span></td>
                }
                else if (Facture.NbDaysRemaining(fac.DateReglement) <= Facture.DEADLINE_WARNING)
                {
                    <td>@fac.DateReglement.ToShortDateString() - <span style="color:orange;">@DeadlineToNbDaysRemaining(fac.DateReglement)</span></td>
                }
                else
                {
                    <td>@fac.DateReglement.ToShortDateString() - <span>@DeadlineToNbDaysRemaining(fac.DateReglement)</span></td>
                }

                <td>@fac.MontantRegle / @fac.Montant € (@(fac.Montant - fac.MontantRegle) € restant dû)</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private Facture fac = null;

    protected override async Task OnInitializedAsync()
    {
        fac = await http.GetFromJsonAsync<Facture>("api/factures/" + fRef.FReference);
    }

    private string DeadlineToNbDaysRemaining(DateTime date)
    {
        return (int)Math.Truncate((date - DateTime.Now).TotalDays) + " jours restants.";
    }
}